package main

import (
	"encoding/json"
	"fmt"
	zlogger "github.com/rs/zerolog"
	"github.com/rs/zerolog/pkgerrors"
	"net/http"
	"os"
	"strconv"
	"uniqlo-sale/internal"
	"uniqlo-sale/pkg"
)

func main() {
	zlogger.ErrorStackMarshaler = pkgerrors.MarshalStack
	log := zlogger.New(os.Stdout).With().Caller().Logger()
	const ProductLimit = 3
	baseURL := "https://www.uniqlo.com/id/api/commerce/v3/en/products?path=15119&flagCodes=discount&offset=0&isV2Review=true&limit=" + strconv.Itoa(ProductLimit)

	req, err := http.NewRequest("GET", baseURL, nil)
	if err != nil {
		log.Err(err)
		return
	}
	req.Header = http.Header{
		"User-Agent": {"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36"},
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Err(err).Send()
		return
	}
	defer resp.Body.Close()

	var products internal.AutoGenerated
	err = json.NewDecoder(resp.Body).Decode(&products)
	if err != nil {
		log.Err(err).Send()
		return
	}

	var medias []internal.Media
	for i, item := range products.Result.Items {
		var (
			img  pkg.Image
			path string
		)
		img, err = pkg.Download(fmt.Sprintf("%s?width=800", item.Images.Main[0].URL))
		if err != nil {
			log.Error().Stack().Err(err).Send()
			return
		}
		img.Name = item.Name
		img.Price, err = pkg.RemoveZeroes(item.Prices.Base.Value)
		if err != nil {
			log.Err(err).Send()
			return
		}
		img.DiscountedPrice, err = pkg.RemoveZeroes(item.Prices.Promo.Value)
		if err != nil {
			log.Err(err).Send()
			return
		}

		path, err = img.PutPrice()
		if err != nil {
			log.Err(err).Send()
			return
		}
		medias = append(medias, internal.Media{
			Type:    "photo",
			Media:   "attach://file" + strconv.Itoa(i),
			File:    path,
			Caption: "https://www.uniqlo.com/id/id/products/" + item.ProductID,
		})
	}

	err = internal.SendMediaGroup(medias)
	if err != nil {
		log.Err(err).Send()
		return
	}

}
